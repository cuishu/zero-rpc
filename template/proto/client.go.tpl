// Code generated by zero-rpc. DO NOT EDIT.

package proto

import (
	"context"

	"github.com/zeromicro/go-zero/core/discov"
	"github.com/zeromicro/go-zero/zrpc"
)

type Client struct {
	rpcClient zrpc.Client
	client    {{.Service.Name}}Client
}

func NewClient(etcHosts []string) (*Client, error) {
	rpcClient, err := zrpc.NewClient(zrpc.RpcClientConf{
		Etcd: discov.EtcdConf{
			Hosts: etcHosts,
			Key:   "{{.Package}}.rpc",
		},
		Timeout: 2000,
		Middlewares: zrpc.ClientMiddlewaresConf{
			Trace: true,
			Duration: true,
			Prometheus: true,
			Breaker: true,
			Timeout: true,
		},
	})
	if err != nil {
		return nil, err
	}
	return &Client{
		rpcClient: rpcClient,
		client: New{{.Service.Name}}Client(rpcClient.Conn()),
	}, nil
}
{{range .Service.Methods}}
{{.Comment}}
func (c *Client) {{.Name}}(ctx context.Context, input *{{.Param}}) (*{{.Return}}, error) {
	return c.client.{{.Name}}(ctx, input)
}
{{end}}

func (c *Client)Close() {
	c.rpcClient.Conn().Close()
}